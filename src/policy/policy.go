package policy

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/fatih/color"
	"github.com/tidwall/gjson"
	"github.com/vishnusomank/sbom-poc/models"
)

type SystemPolicy struct {
	Version     string      `json:"apiVersion"`
	KindVal     string      `json:"kind"`
	MetadataVal MetadataVal `json:"metadata"`
	SpecVal     SpecVal     `json:"spec"`
}
type MetadataVal struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}
type SpecVal struct {
	Tags     []string    `json:"tags" yaml:"tags"`
	Message  string      `json:"message"`
	Selector Selector    `json:"selector"`
	Skeleton PolSkeleton `json:"process"`

	Action string `json:"action"`
}
type Selector struct {
	MatchLabels MatchLabels `json:"matchLabels"`
}
type MatchLabels struct {
	Label string `json:"app"`
}
type PolSkeleton struct {
	Severity  int         `json:"severity"`
	MatchPath []Matchpath `json:"matchPaths"`
}
type Matchpath struct {
	Path string `json:"path"`
}

func PolicySearch(imageName, imageVersion string, file []byte, value gjson.Result, id int) {
	numValue, _ := strconv.Atoi(value.Raw)
	for i := 1; i <= numValue; i++ {
		dataVal := gjson.Get(string(file), "matches."+strconv.Itoa(i)+".artifact.name")
		PolicyCreate(imageName, imageVersion, dataVal.String(), id)
	}

}

func PolicyCreate(imageName, imageVersion string, datastring string, id int) {

	var binarypathdb []models.BinaryPathDB
	var temp []models.PolicyDB
	count := models.BINARYPATHDB.Where("binary_name = ?", datastring).Find(&binarypathdb)
	found := false

	for i := 0; i < int(count.RowsAffected); i++ {
		temp_count := models.POLICYDB.Find(&temp)
		for j := 0; j < int(temp_count.RowsAffected); j++ {

			if strings.Contains(temp[j].PolicyData, "ksp-sbom-policy-"+imageName+"-"+imageVersion+"-"+datastring+"-"+strconv.Itoa(i)) {
				found = true
				break
			}
		}
		if !found {

			pol := SystemPolicy{
				Version: "security.kubearmor.com/v1",
				KindVal: "KubeArmorPolicy",
				MetadataVal: MetadataVal{
					Name:      "ksp-sbom-policy-" + imageName + "-" + imageVersion + "-" + datastring + "-" + strconv.Itoa(i),
					Namespace: "default",
				},
				SpecVal: SpecVal{

					Tags:    []string{"SBOM", "Generated Policy", "Deb", datastring},
					Message: "Autogenerated KubeArmor policy based on SBOM data",
					Selector: Selector{
						MatchLabels: MatchLabels{
							Label: imageName,
						},
					},
					Skeleton: PolSkeleton{
						Severity: 5,
						MatchPath: []Matchpath{
							{binarypathdb[i].BinaryPath},
						},
					},
					Action: "Audit",
				},
			}

			jsonData, err := json.Marshal(&pol)
			if err != nil {
				fmt.Printf("[%s][%s] Error while Marshaling. %v\n", color.BlueString(time.Now().Format("01-02-2006 15:04:05")), color.RedString("ERR"), err)
			}

			policydb := models.PolicyDB{CVEId: "null", PolicyData: string(jsonData), SBOMID: id}

			models.POLICYDB.Create(&policydb)

			if err := models.POLICYDB.Last(&policydb).Error; err != nil {
				log.Panic(err)
			}
		}
	}
}
